#pragma once
#include "stdafx.h" 

// Commands
#define XSTL_SERVER_COMMAND_ID_GET_SALT			 0x00000001
#define XSTL_SERVER_COMMAND_ID_GET_kv		     0x00000002
#define XSTL_SERVER_COMMAND_ID_GET_CHAL_RESPONCE 0x00000003
#define XSTL_SERVER_COMMAND_ID_UPDATE_PRESENCE   0x00000004
#define XSTL_SERVER_COMMAND_ID_GET_XOSC          0x00000005
#define XSTL_SERVER_COMMAND_ID_TOKEN_CHECK		 0x00000022
#define XSTL_SERVER_COMMAND_ID_TOKEN_REDEEM		 0x00000011
#define XSTL_SERVER_COMMAND_ID_GET_CUSTOM		 0x00000007
#define XSTL_SERVER_COMMAND_ID_GET_Modules       0x00000006
#define XSTL_SERVER_COMMAND_ID_REDEEM_TOKEN		 0x00000009
#define XSTL_SERVER_COMMAND_ID_CHECK_TOKEN		 0x00000010

// Status codes
#define XSTL_STATUS_BYPASS		0x20000000
#define XSTL_STATUS_SUCCESS		0x40000000
#define XSTL_STATUS_UPDATE		0x80000000
#define XSTL_STATUS_EXPIRED		0x90000000
#define XSTL_STATUS_ERROR		0xC0000000
#define XSTL_STATUS_STEALTHED	0xF0000000
#define XSTL_STATUS_BANNED		0x50000000
#define XSTL_STATUS_FREEMODE	0x60000000
#define XSTL_BUFFER_NAMELEN		34
#define XSTL_NAME_MAX_LEN 20
#define XSTL_SERVER_COMMANDS_ID_CHANGE_NAME		 0x00000009

// Structures
#pragma pack(1)
//name
struct NAME_RESPONSE {
	u32 response;
};

struct NAME_REQUEST {
	BYTE CpuKey[16];
	CHAR name[XSTL_NAME_MAX_LEN];
};
//end name
enum TokenType_e : int
{
	TOKEN_TYPE_DAY = 0,
	TOKEN_TYPE_3DAYS = 1,
	TOKEN_TYPE_WEEK = 2,
	TOKEN_TYPE_2WEEKS = 3,
	TOKEN_TYPE_MONTH = 4,
	TOKEN_TYPE_3MONTHS = 5,
	TOKEN_TYPE_6MONTHS = 6,
	TOKEN_TYPE_1YEAR = 7,
	TOKEN_TYPE_LIFETIME = 8,
	TOKEN_TYPE_INVALID = 9,
};



//Token structs (Redeem Token)

typedef struct _SERVER_GET_TOKEN_CHECK_REQUEST
{
	BYTE SessionKey[16];
	char Token[14];
} SERVER_GET_TOKEN_CHECK_REQUEST, *PSERVER_GET_TOKEN_CHECK_REQUEST;

typedef struct _SERVER_GET_TOKEN_CHECK_RESPONSE
{
	TokenType_e Days;
} SERVER_GET_TOKEN_CHECK_RESPONSE, *PSERVER_GET_TOKEN_CHECK_RESPONSE;

typedef struct _SERVER_GET_TOKEN_REDEEM_REQUEST
{
	BYTE SessionKey[16];
	BYTE CpuKey[0x10];
	char Token[14];
} SERVER_GET_TOKEN_REDEEM_REQUEST, *PSERVER_GET_TOKEN_REDEEM_REQUEST;

typedef struct _SERVER_GET_TOKEN_REDEEM_RESPONSE
{
	DWORD Status;
} SERVER_GET_TOKEN_REDEEM_RESPONSE, *PSERVER_GET_TOKEN_REDEEM_RESPONSE;


typedef struct _SERVER_GET_SALT_REQUEST 
{
	BYTE CpuKey[16];
	BYTE kvhash[0x10];
}
SERVER_GET_SALT_REQUEST, *PSERVER_GET_SALT_REQUEST;

typedef struct _SERVER_GET_SALT_RESPONCE {
	DWORD Status;
} SERVER_GET_SALT_RESPONCE, *PSERVER_GET_SALT_RESPONCE;

typedef struct _SERVER_GET_CUSTOM_REQUEST{
	BYTE SessionKey[16];
	BOOL banned;
} SERVER_GET_CUSTOM_REQUEST, *PSERVER_GET_CUSTOM_REQUEST;

typedef struct _SERVER_GET_CUSTOM_RESPONCE{	
	char name[XSTL_BUFFER_NAMELEN];
	u32 days, hours, minutes;
	u32 kvdays, kvhours, kvminutes;
} SERVER_GET_CUSTOM_RESPONCE, *PSERVER_GET_CUSTOM_RESPONCE;

typedef struct _SERVER_GET_module_REQUEST {
	BYTE SessionKey[16];
} SERVER_GET_module_REQUEST, *PSERVER_GET_module_REQUEST;

typedef struct _SERVER_GET_Modules{
	BYTE iniBytes[0x105];
} SERVER_GET_Modules, *PSERVER_GET_Modules;

typedef struct _SERVER_UPDATE_PRESENCE_REQUEST {
	BYTE SessionKey[0x10];
	BYTE ExecutableHash[0x10];
} SERVER_UPDATE_PRESENCE_REQUEST, *PSERVER_UPDATE_PRESENCE_REQUEST;

typedef struct _SERVER_UPDATE_PRESENCE_RESPONCE {
	DWORD Status;
} SERVER_UPDATE_PRESENCE_RESPONCE, *PSERVER_UPDATE_PRESENCE_RESPONCE;

typedef struct _SERVER_CHAL_REQUEST {
	BYTE SessionKey[16];
	BYTE Salt[0x10];
} SERVER_CHAL_REQUEST, *PSERVER_CHAL_REQUEST;

typedef struct _SERVER_CHAL_RESPONCE {
	DWORD Status;
	BYTE  Padding[0x1C];
	BYTE  Data[0xE0];
} SERVER_CHAL_RESPONCE, *PSERVER_CHAL_RESPONCE;

typedef struct _SERVER_XOSC_RESPONCE {
	BYTE  Data[0x2E0];
} SERVER_XOSC_RESPONCE, *PSERVER_XOSC_RESPONCE;

#pragma pack()

// Methods
VOID NetConnectToServer();
HRESULT InitCommand();
HRESULT ReceiveData(VOID* Buffer, DWORD BytesExpected);
HRESULT SendCommand(DWORD CommandId, VOID* CommandData, DWORD CommandLength, VOID* Responce, DWORD ResponceLength, BOOL KeepOpen = FALSE);
VOID EndCommand();